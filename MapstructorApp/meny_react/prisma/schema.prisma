// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// Command for refreashing the db: 
//        npx prisma generate; npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//switch around the models to
//          MapFilterGroup
//               |
//          list of maps
//               |
//        list of mapFilterItems

model MapFilterGroup {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  groupName      String
  label          String
  maps           Map[]
  mapId          String          @unique
  mapfilteritems MapFilterItem[]
}

model Map {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  mapId     String
  longitude Float
  latitude  Float
  mapName   String
  zoom      Float
  bearing   Float
  styleId   String

  MapFilterGroup MapFilterGroup? @relation(fields: [mapId], references: [mapId])
}

model MapFilterItem {
  id                         String  @id @default(auto()) @map("_id") @db.ObjectId
  itemName                   String
  label                      String
  defaultCheckedForBeforeMap Boolean
  defaultCheckedForAfterMap  Boolean
  showInfoButton             Boolean
  showZoomButton             Boolean
  mapId                      String

  mapfiltergroup MapFilterGroup? @relation(fields: [mapId], references: [mapId])
}

model LayerSection {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  name          String             @unique
  layerGroups   LayerGroup[]
  layerSections LayerSectionData[]
}

model LayerSectionData {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String        @unique
  section       LayerSection? @relation(fields: [sectionName], references: [name])
  sectionName   String
  iconColor     String
  iconType      String
  label         String
  longitude     Float?
  latitude      Float?
  zoom          Float?
  bearing       Float?
  groupName     LayerGroup?   @relation(fields: [topLayerClass], references: [name])
  topLayerClass String?
  infoId        String?
  layers        Layer[]
}

//groups the layers under the Section
model LayerGroup {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String             @unique
  childLayers      LayerSectionData[]
  layerSection     LayerSection       @relation(fields: [layerSectionName], references: [name])
  layerSectionName String
}

model Layer {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  layerName        String
  type             String
  LayerSectionData LayerSectionData? @relation(fields: [sectionName], references: [name])
  sectionName      String?
  sourceType       String
  sourceUrl        String
  sourceId         String
  paint            String?
  sourceLayer      String
  hover            Boolean
  time             Boolean
  click            Boolean
}
