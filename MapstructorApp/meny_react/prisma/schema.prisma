// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// Command for refreashing the db: 
//        npx prisma generate; npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Map {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  mapId          String @unique
  longitude      Float
  latitude       Float
  name           String
  zoom           Float
  bearing        Float
  styleId        String
  MapFilterGroup MapFilterGroup[]
}

model MapFilterItem{
    id                         String @id @default(auto()) @map("_id") @db.ObjectId
    name                       String
    label                      String
    defaultCheckedForBeforeMap Boolean
    defaultCheckedForAfterMap  Boolean
    showInfoButton             Boolean
    showZoomButton             Boolean
    mapId                      String @unique
    mapfiltergroup             MapFilterGroup @relation(fields: [mapId], references: [mapId])
}

model MapFilterGroup{
  id             String @id @default(auto()) @map("_id") @db.ObjectId 
  name           String
  label          String
  map            Map @relation(fields: [mapId], references: [mapId])
  mapId          String @unique
  MapFilterItemp MapFilterItem[]
}

model LayerSection {
  name   String             @id @map("_id") @db.ObjectId
  layers LayerSectionData[]
}

model LayerSectionData {
  id            String       @id @map("_id") @db.ObjectId
  name          String       @unique @db.ObjectId
  section       LayerSection @relation(fields: [sectionName], references: [name])
  sectionName   String       @db.ObjectId
  iconColor     String
  label         String
  zoomTo        String?
  groupName     LayerGroup?  @relation(fields: [topLayerClass], references: [name])
  topLayerClass String?      @db.ObjectId
  infoId        String?
  layers        Layer[]
}

model LayerGroup {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  name        String             @unique @db.ObjectId
  childLayers LayerSectionData[]
}

model Layer {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  layerName        String
  type             String
  LayerSectionData LayerSectionData? @relation(fields: [sectionName], references: [name])
  sectionName      String?           @db.ObjectId
  sourceType       String
  sourceUrl        String
  sourceId         String
  paint            String?
  sourceLayer      String
}
