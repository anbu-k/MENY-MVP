// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// Command for refreashing the db: 

// ====> npx prisma generate; npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model MapFilterGroup {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  groupName      String
  label          String
  groupId        String          @unique
  maps           Map[]
  mapfilteritems MapFilterItem[]
}

model Map {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  mapId       String     @unique
  longitude   Float
  latitude    Float
  mapName     String
  zoom        Float
  bearing     Float
  styleId     String
  groupId     String
  zoomLabelId String?    @db.ObjectId
  zoomLabel   ZoomLabel? @relation(fields: [zoomLabelId], references: [id])

  MapFilterGroup MapFilterGroup? @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
}

model MapFilterItem {
  id                         String  @id @default(auto()) @map("_id") @db.ObjectId
  itemName                   String
  label                      String
  defaultCheckedForBeforeMap Boolean
  defaultCheckedForAfterMap  Boolean
  showInfoButton             Boolean
  showZoomButton             Boolean
  itemId                     String  @unique
  groupId                    String

  mapfiltergroup MapFilterGroup? @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
}

model ZoomLabel {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  minZoom   Float?
  zoom      Float
  bearing   Float
  latitude  Float
  longitude Float
  Map       Map[]
}

model LayerSection {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  layerGroups LayerGroup[]
}

model LayerGroup {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String       @unique
  layers         LayerData[]
  layerSection   LayerSection @relation(fields: [layerSectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  layerSectionId String       @db.ObjectId
  longitude      String?
  latitude       String?
  zoom           Float?
  bearing        Float?
}

type hoverItem {
  label String
  type  String
}

model LayerData {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String      @unique
  iconColor     String
  iconType      String
  label         String
  longitude     Float?
  latitude      Float?
  zoom          Float?
  bearing       Float?
  groupName     LayerGroup? @relation(fields: [topLayerClass], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topLayerClass String?     @db.ObjectId
  infoId        String?
  type          String
  sourceType    String
  sourceUrl     String
  sourceId      String
  paint         String?
  sourceLayer   String
  hover         Boolean
  time          Boolean
  click         Boolean
  hoverStyle    String?
  clickStyle    String?
  clickHeader   String?
  hoverContent  hoverItem[]
}
